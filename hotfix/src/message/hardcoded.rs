//! These messages should be autogenerated eventually,
//! but for now we hard-code the ones we need from the
//! FIX 4.4 spec.
//!
use crate::message::common::create_tag;
use fefix::fix_values::{Date, Timestamp};
use fefix::tagvalue::EncoderHandle;

#[derive(Debug, Clone)]
pub enum Side {
    Buy,
    Sell,
}

#[derive(Debug, Clone)]
pub struct NewOrderSingle {
    // order details
    pub transact_time: Timestamp,
    pub symbol: String,    // CCY1/CCY2 as string
    pub cl_ord_id: String, // unique order ID assigned by the customer
    pub side: Side,
    pub order_qty: u32,
    pub settlement_date: Date,
    pub currency: String, // the dealt currency

    // allocation
    pub number_of_allocations: u32,
    pub allocation_account: String,
    pub allocation_quantity: u32,
}

#[derive(Debug, Clone)]
pub enum FixMessage {
    NewOrderSingle(NewOrderSingle),
}

trait IntoRawMessage {
    fn write(&self, msg: &mut EncoderHandle<Vec<u8>>);
}

impl IntoRawMessage for FixMessage {
    fn write(&self, msg: &mut EncoderHandle<Vec<u8>>) {
        match self {
            FixMessage::NewOrderSingle(order) => {
                // order details
                msg.set_any(create_tag(60), order.transact_time.clone());
                msg.set_any(create_tag(55), order.symbol.as_bytes());
                msg.set_any(create_tag(11), order.cl_ord_id.as_bytes());
                msg.set_any(create_tag(11), order.cl_ord_id.as_bytes());
                let side = match order.side {
                    Side::Buy => "1",
                    Side::Sell => "2",
                };
                msg.set_any(create_tag(54), side);
                msg.set_any(create_tag(38), order.order_qty);
                msg.set_any(create_tag(64), order.settlement_date);
                msg.set_any(create_tag(15), order.currency.as_bytes());

                // allocations
                msg.set_any(create_tag(78), order.number_of_allocations);
                msg.set_any(create_tag(79), order.allocation_account.as_bytes());
                msg.set_any(create_tag(80), order.allocation_quantity);
            }
        }
    }
}
